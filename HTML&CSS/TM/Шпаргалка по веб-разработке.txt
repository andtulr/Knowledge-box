Оглавление:
0. Куда направляться.
1. Прежде, чем смотреть далее...
2. Общее.
3. ВЁРСТКА — HTML.
4. CSS.
5. JS (jQuery тоже тут и про Vue тоже здесь).
6. UI/UX, Figma:
7. GIT.
8. Умозрение (теория) и ссылки на дополнительные полезные материалы.


0. Куда направляться. Если вопросы к :
  -- СОДЕРЖИМОМУ сайта (тому, что содержится на сайте):
      *** это HTML (это разметка)
  -- ВНЕШНЕМУ ВИДУ сайта (включая расстояния/отступы между элементами), включая такие события, как "при наведении мышки", и некоторые простейшие анимации:
      *** это CSS (это разметка)
  -- СОБЫТИЯМ и ДЕЙСТВИЯМ на сайте (включая то, что происходит по нажатию кнопок; события загрузки сайта, прокрутки страницы, событие что происходит при любом изменении элементов на сайте; действия пользователя, такие как щелчки мышки, движения мышки и др.; задержки-таймеры; анимация; и прочее):
      *** это JS (JavaScript). НЕ ПУТАТЬ с Java. Java и JavaScript — такие же разные вещи, как картошка и ананас. Объединять их может разве что то, что картошку называют "земляным яблоком" (по-французски), а ананас называют "сосновым яблоком" (по-английски)

1. Прежде, чем смотреть далее убедитесь, что вы ознакомились с материалами курса на ЛМС. Там имеются видеоматериалы, удобное конспекты, задания (которые вы, конечно, сделали), тесты.



*****************************************************************
*****************************************************************
*****************************************************************

2. ОБЩЕЕ (куда направляться при распространённых задачах):

САМОЕ ВАЖНОЕ:
ЛЮБОЙ разработчик, даже самый бывалый, чуть что сразу яндексит, гуглит, иным образом обращается в сеть. Рабочие инструменты любого разработчика (не важно только верстальщика, дизайнера или другого подобного):

    1. Интернет. Чуть что ищем там, проверяем есть ли уже готовое решение задачи, используем готовое решение, если это возможно, пользуемся нейросетями. Это всё ваше время и деньги.

    2. Среда разработки. Тут может быть что угодно: VS code, Atom, Sublime Text, Figma, обычный Блокнот.

    3. Собственный опыт: со временем что-то запомнится, что-то притрётся и вы поймёте как что лучше делать.



    Задача:  -- Нужно быстро сделать сайт. Ключевое слово - БЫСТРО!
    Решение:
          1. ВРУЧНУЮ. Взять готовый образец и подстроить его под свои нужды. Образцы можно найти в сети, но внимательно следите за тем, что скачиваете и вообще куда щёлкаете мышкой. Также можно применять любые фреймворки, которые посчитаете нужными, чтобы ускорить выполнение задачи.

          2. НА КОНСТРУКТОРЕ. Поисковичите (находите в поисковике) любой удобный конструктор, и быстро делаете сайт. У конструкторов есть бесплатные и платные функции. При создании сайтов на заказ обязательно ознакомьтесь с ценами у других людей на подобные услуги. Например, на той же площадке Авито.

          3. С помощью CMS (Си-эМ-эС). Например Wordpress, Joomla и др. Для работы с CMS-ками (Си-эМ-эС-ками) нужно, правда, сперва ознакомиться как с ними работать, но по времени это сравнительно немного занимает.

    Задача:  -- Нужно сделать сайт. Ключевое слово - СДЕЛАТЬ!
    Решение:
          1. Любой из описанных выше способов.

          2. ВРУЧНУЮ. Хоть с нуля. Но это заметно дольше. Прям очень заметно.

          3. Так-то можно воспользоваться службой WebFlow. Очень даже удобно. Это одновременно и конструктор и работа с кодом. Но это платно. Можете найти и ознакомиться.

    Задача:  -- Нужно сделать веб-приложение, либо сайт, в котором явно столько функций предполагается, что по сути это веб-приложение. Ключевые слова - ИНТЕРАКТИВНОСТЬ, НАЖМИ-НА-КНОПКУ-ПОЛУЧИШЬ-РЕЗУЛЬТАТ, АВТОМАТИЗАЦИЯ.
    Решение:
          1. Нужно убедиться наверняка, точно ли нужно веб-приложение. Если нет, но нужна определённая интерактивность на сайте, то можно просто обычный сайт делать, добавив туда определённый код на JS/jQuery, какие-то фреймворки прикрутить.

          2. Если нужно именно веб-приложение, то понадобится Vue.js. И тут мы обращаемся к документации Вью.

    Задача:  -- Заказчик хочет сайт, но сам толком не понимает что-куды-чаво-и-как.
    Решение:
          1. Нужно выяснить что именно хочет человек, можно показать ему какие-то образцы, предложить сделать что-то похожее. Если человек не знает чего он хочет, но он хочет сайт, то ему нужно показать готовый результат-образец. Причём лучше, если это будет прототип на Фигме. Но тут тоже нужно сперва выяснить что он хочет, прежде, чем делать прототип, и объяснить зачем прототип/дизайн нужен. Многим это не нужно в первую очередь по причине сбережения средств. Это отдельный вопрос про то, когда прототипы и разработка дизайна нужны, а когда нет.



*****************************************************************
*****************************************************************
*****************************************************************

3. HTML:

    Горячие клавиши VS code и как с ним удобнее и быстрее взаимодействовать. VS code cheatsheet:
      https://quickref.me/vscode

    Плагин, который помогает БЫСТРЕЕ писать HTML и CSS — Шпаргалка по тому, как его использовать. Emmet cheatsheet
      https://quickref.me/emmet

    Шаблоны (их тьма тьмущая в сети, это лишь немного примеров):
        работа с шаблонами:
          https://html-templates.info/templates
        бесплатные шаблоны менюшек сайтов:
          https://www.codingnepalweb.com/free-sidebar-menu-templates/


    Полное руководство по Флексбоксу (в сети имеются и другие подобные руководства, но это одно из довольно хороших):
      https://habr.com/ru/articles/467049/

    CSS Grid (по-русски: средство, чтоб сделать сетку сайта быстро и красиво):
        Введение в CSS Grid (в сети имеются и другие подобные руководства, но это одно из довольно хороших):
          https://webformyself.com/vvedenie-v-maket-css-grid/
        Руководство по CSS-Grid:
          https://skillbox.ru/media/code/uchimsya-verstat-v-setke-bolshoy-gayd-po-css-grid/

    Про адаптив (чтобы страница подстраивалась под разные размеры экранов):
      https://purpleschool.ru/knowledge-base/article/media

    Практикумы и упражнения для наработки навыка:
        хороший практикум по HTML+CSS:
          https://htmlbase.ru/exercises
        практикум htmlbook:
          https://htmlbook.ru/practical
        упражнения по html:
          https://www.schoolsw3.com/js/js_exercises.php

    SEO для разработчиков: что нужно знать программистам в 2024 году:
      https://tproger.ru/articles/seo-dlya-razrabotchikov--chto-nuzhno-znat-programmistam-v-2024-godu--osnovnye-trebovaniya-k-razrabotke-sajta

    HTML cheatsheet:
      https://quickref.me/html



4. CSS:
    Шпаргалка по CSS — CSS 3 cheatsheet:
      https://quickref.me/css3

    Также, для ускорения записи стилей и чтобы делать это удобнее имеются CSS-фреймворки, такие как SASS, LESS и др.

5. JS:
    Задания для JS-прокачки:
      https://daruse.ru/zadaniya-po-js-dlya-prokachki
    Отправка писем с помощью JS (это не единственные способы, их уйма, выбирайте то, что вам больше подходит и нравится):
      https://sky.pro/wiki/javascript/pryamaya-otpravka-email-s-sayta-cherez-java-script-metody-i-kod/
    Шпаргалка — JavaScript cheatsheet:
      https://quickref.me/javascript
    Шпаргалка — jQuery cheatsheet:
      https://quickref.me/jquery

    VUE.JS
        Хороший самоучитель по Vue.js (Вью джэй-эс): https://vuejs-doc-ru.vercel.app/tutorial/#step-1

        Руководство по Vue.js (Вью джэй-эс):: https://metanit.com/web/vuejs/1.1.php
    ___________________________________________________|
    |
   \ /
    |
Там же есть и в целом для вэба обучашки-руководства (): https://metanit.com/web/


6. UI/UX, Figma:
      статья про UI/UX с полезными ссылками:
        https://sky.pro/media/ux-ui/
      и вот ещё статья про UI/UX дизайн:
        https://media.contented.ru/osnovy/napravleniya/chto-takoe-ux-ui-dizajn/
      19 принципов построения интерфейсов:
        https://habr.com/ru/companies/SECL_GROUP/articles/182208/

      Первая презентация Айфона:
        https://rutube.ru/video/d42aaa4f7bb89daac307b63aa99c23f1/?&utm_source=embed&utm_medium=referral&utm_campaign=logo&utm_content=d42aaa4f7bb89daac307b63aa99c23f1&utm_term=yastatic.net%2F&referrer=appmetrica_tracking_id%3D1037600761300671389%26ym_tracking_id%3D5899502207415380254


      Сайт для проектирования дизайн-макетов интерфейсов (Figma):
        https://www.figma.com/ -
      Плагин для использования иконок:
        https://www.figma.com/resources/assets/material-icons-outline/
      удаление фона из изображений с помощью ИИ (Искусственного Интеллекта):
        https://retoucher.online/ru
      Здесь можно найти бесплатные образцы прототипов для Фигмы. Именно эта ссылка ведёт на образцы прототипов портфолио:
        https://www.figma.com/community/portfolio-templates?resource_type=mixed&editor_type=figma&price=free&sort_by=all_time&creators=all
      довольно неплохой образец-прототип одностраничного сайта (одностраничник, лэндинг-пэйдж [landing page]). Тематика сайта: путешествия:
        https://www.figma.com/community/file/788675347108478517
      ещё один довольно неплохой образец-прототип одностраничного сайта (одностраничник, лэндинг-пэйдж [landing page]). Здесь сразу и настольная и мобильная версия прототипа:
        https://www.figma.com/community/file/1058842196634115002/digital-agency-website-freebie
      ещё один довольно неплохой образец-прототип одностраничного сайта портфолио (одностраничник, лэндинг-пэйдж [landing page]):
        https://www.figma.com/community/file/1116316830579955404
      просто макет с изображениями большого/компьютерного/настольного, планшетного, мобильного разрешений экранов:
        https://www.figma.com/community/file/915106818892183760
      образец-прототип анимированного меню в Фигме:
        https://www.figma.com/community/file/1293911601433273694

      хорошее видео про прототипы в Фигме:
        https://rutube.ru/video/e46a80c78a3c647b47150a589a3e7b3b/?&utm_source=embed&utm_medium=referral&utm_campaign=logo&utm_content=e46a80c78a3c647b47150a589a3e7b3b&utm_term=yastatic.net%2F&referrer=appmetrica_tracking_id%3D1037600761300671389%26ym_tracking_id%3D337509850192183162

      КАК СДЕЛАТЬ АНИМАЦИЮ БЕГУЩЕЙ СТРОКИ В ФИГМЕ | АНИМАЦИЯ В ФИГМЕ ЗА 7 МИНУТ:
        https://rutube.ru/video/70a2574f35dbe016a9fe8fd9f8ca2cf8/?&utm_source=embed&utm_medium=referral&utm_campaign=logo&utm_content=70a2574f35dbe016a9fe8fd9f8ca2cf8&utm_term=yastatic.net%2F&referrer=appmetrica_tracking_id%3D1037600761300671389%26ym_tracking_id%3D3053712753065995537

      список 40 неплохих плагинов для Фигмы:
        https://htmlacademy.ru/blog/soft/figma-plugins

      Подбор цвета:
        https://html-templates.info/webservices/kak-je-podobrat-tsvet
      определить шрифт по изображению:
        https://products.aspose.app/ocr/ru/font-detector/jpg

      Про политику конфиденциальности:
        https://www.unisender.com/ru/blog/politika-konfidencialnosti-na-sajte-dlya-chego-nuzhna-i-kak-sdelat/


7. GIT - Распределённая Система Контроля Версий:

  Как удобнее использовать Git?
    На мой взгляд (субъективно) через Git bash. То есть:
        1. Создавать репозиторий на гитхабе/гитфлике или любом другом удобном ресурсе.
        2. Убедиться что гит установлен. Если нет, то установить.
        3. В любой удобной папке щёлкнуть ПКМ (Правой Кнопкой Мыши) по пустому месту и выбрать Open GIT bash here. Выполнить комманду git clone адрес_репозитория_который_вы_уже_создали_на_гите_и_клонируете_к_себе_на_компьютер.
        4. Закрыть GIT bash, открыть папку с клонированным на вашем компьютере репозиторием, открыть GIT bash в этой папке (как в предыдущем пункте).
        5. При изменениях проверяем статус:
          git status
        Если нужно добавить файлы в коммит, то выполняем комманду:
          git add .
          (точка — это часть комманды)
        Проверяем статус, чтоб убедиться, что всё добавилось:
          git status
        Делаем коммит с осмысленным комментарием:
          git commit -m "Осмысленный комментарий: что изменилось в коде с этим комментарием?"
        Заливаем изменения:
          git push origin master
          (Это сработает, если вы на ветке с названием master. Убедитесь, что название ветки верное)
        6. Работаетм дальше. При необходимости, повторяем действия выше.

  Как использовать Git в VS Code:
    https://htmlacademy.ru/blog/git/git-in-vscode (пролистать до конца! Там внизу ссылки на три полезные статьи по гиту)

  Как использовать Git в Atom-е:
    Наводите указатель мышки в середу правой стенки редактора Атом и появляетя стрелочка. Нажимаете и видете Git и GitHub. В целом, там всё интуитивно понятно.

  Забыли какие-то комманды из гита:
    1) Яндекс/гугл/иной поисковик в помощь.
    2) Быстро подсмотреть в ШПАРГАЛКУ, где всё необходимое есть с примерами:
      https://quickref.me/git (если не открывается, то попробуйте в другом браузере открыть, это иногда работает)

*****************************************************************
*****************************************************************
*****************************************************************







8. Умозрение (теория):
    Формирование требований и классификация требований:
      https://analytics.infozone.pro/formation-requirements-and-classification-requirements/
    Выработка бизнес-требований:
      https://econ.wikireading.ru/63698
    Бизнес-правила:
      https://ru.itpedia.nl/2019/04/17/wat-zijn-business-rules/
    Бизнес-риски:
      https://kontur.ru/articles/329
    Бизнес-цели:
      http://www.stplan.ru/articles/theory/biznes-celi.htm
    ChatGPT:
      https://quickref.me/chatgpt
